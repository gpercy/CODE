This package contains a version of the 3D spectral element code SPECFEM3D-SESAME (Komatitsch et al)
modified by Galvez, Ampuero and Nissen-Meyer to model dynamic earthquake on non-planar faults
with slip-weakening friction. The main modifications are encapsulated in three new modules: 
src/fault_object.f90, src/fault_solver.f90) and decompose_mesh_SCOTCH/fault_scotch.f90. 
We also include some examples and Matlab functions for post-processing and visualization. 

This is a preliminary version, still under development and testing. The format of inputs, outputs
and features are subject to change.

Details about the original package are described in its manual (manual_SPECFEM3D.pdf).
The current README file describes how to install and run our modified version of the code.
It is not a replacement for the original manual, which you should read first.

This document assumes that the root directory containing the code is ~/SPECFEM3D.




I. INSTALLATION
----------------

1. Copy the start-up and source files to the root directory:

  	>> cd ~/SPECFEM3D 
	>> cp START_UP/*  src/*  .


2. Modify compiler options if needed:
  The file flags.guess contains default values for compiler flags, which in general work fine.
  To force your preferred compiler settings you must edit the variables FLAGS_CHECK and 
  FLAGS_NO_CHECK in file flags.guess. 


3. Configure the package, for instance:

  	>> ./configure FC=ifort MPIFC=mpif90

  Several settings can be tuned for your system, see Chapter 2 of the manual for more details.
  The code runs by default in single precision. If you prefer to run in double precision do instead: 

	>> ./configure --enable-double-precision FC=ifort MPIFC=mpif90


4. Compile the package:

	>> make 

  This creates the following executables: 
	xgenerate_dabases (database generation)
        xspecfem3d (solver)
	xcombine_AVS_DX 
	xconvolve_source_timefunction.   


5. Install SCOTCH: 

   	>> cd decompose_mesh_SCOTCH
	>> tar -xvf scotch.5.1.7.tar
	Follow the instructions in the scotch_5.1.7/INSTALL.txt file.
        copy scotch_5.1/src/Make.inc/Makefile.inc.i686_pc_linux2.debug to scotch_5.1/src/Makefile.inc

6. Compile the SCOTCH-to-SPECFEM3D interface program, also in the directory decompose_mesh_SCOTCH:

   	Edit the Makefile: 
		+ the F90 variable to match your compiler. 
		+ the SCOTCH_LIB_PATH to match your SCOTCH library path.
	>> make

  This creates the executable xdecompose_mesh_SCOTCH in directory decompose_mesh_SCOTCH.


7. Obtain and install the mesh generation software CUBIT (cubit.sandia.gov). 
  If you don't have a CUBIT license yet, you can still run the examples in this package using 
  the mesh files we provide.




II. RUNNING A SIMULATION
-------------------------

1. Copy the input files to the work directory:

	>> cd ~/SPECFEM3D
     	>> cp -r EXAMPLES/splay_faults/DATA  ./


2. Create a mesh with CUBIT: 
  (If you have not installed CUBIT yet skip this step and use the mesh files included 
  with the examples.)

  	Move to the directory CUBIT, open the cubit GUI, run a CUBIT script: 
    	>> cd ~/SPECFEM3D/CUBIT
    	>> cubit
    	In CUBIT's menu "Tools", select "Play Journal File" and select a script file, 
    	for instance EXAMPLES/splay_faults/splay_faults.py

  This creates several mesh files in directory CUBIT/MESH/:     
	absorbing_surface_file_* (5 files)
	free_surface_file
	materials_file
	mesh_file
	nodes_coords_file
	nummaterial_velocity_file

  The CUBIT graphics window should show the mesh (e.g. EXAMPLES/splay_faults/splay_faults.jpg)


3. Partition the mesh with the domain decomposition software SCOTCH.

	>> cd ~/SPECFEM3D/decompose_mesh_SCOTH
	>> ./xdecompose_mesh_SCOTCH 'nproc' ../CUBIT/MESH/ ../DATABASES_MPI/ 

  where 'nproc' is the number of processors that you will use in the simulation.
  The second argument (../CUBIT/MESH/ in this example) is the path to the directory 
  containing the mesh files that were generated by CUBIT.
  This creates one mesh file proc000***_Database per processor in directory DATABASES_MPI.
  These files can be large, so you might want to place DATABASES_MPI in a scratch disk
  and specify the path accordingly when executing xdecompose_mesh_SCOTCH.


4. Edit the file DATA/Par_file: 

   	LOCAL_PATH = should be the path to DATABASES_MPI
	NPROC      = number of processors. The same as the number of partitions in SCOTCH (step 2).


5. Generate databases:

	>> cd ~/SPECFEM3D
   	>> mpirun -np nproc ./xgenerate_databases      
    	or
   	>> ./run/run.xdatabases  

  This creates several binary mesh files for each processor (proc000***.bin)
  in directory DATABASES_MPI.


6. If this is the first time you run a simulation with this mesh, set the parameter
   DT (the time step) DATA/Par_file to a value smaller than the 
   "Maximum suggested time step" in OUTPUT_FILES/output_mesher.txt. 
   Also edit the variables NSTEP and NTSTEP_* in DATA/Par_file accordingly.


7. Run the solver:

	>> mpirun -np nproc ./xspecfem3D                   
   	or
	>>./run/run.xspecfem3d



III. EXAMPLES 
--------------

The package includes a few examples, the SCEC benchmark problems: 
	+ TPV5, a planar vertical strike-slip fault
	(+ TPV14 and TPV15, vertical strike-slip fault system with a fault branch)
 	+ Splay fault models from Wendt et al. (2009)

To run the examples:

1. Read the documents in the directory EXAMPLES/*/description. They contain a description of the example
   and additional instructions to run it. 

2. replace the contents of directory DATA/* by one of the EXAMPLES/tpv*/DATA,
   for instance:

	>> cp -r EXAMPLES/tpv5/DATA ./

3. follow all the steps in section II above.

4. Visualize the results with the matlab scripts in the directory EXAMPLES/*/post




IV. INPUT FILES
----------------

DATA/Par_file	See SPECFEM3D manual page 17.
             	A first version of this file is generated by ./configure.

DATA/STATIONS 	List of stations outside the fault (see manual page 23).

DATA/FAULT/Par_file_faults	contains parameters of the fault. The first part of this file
	has a strict format:

	Line 1: Number of faults (NF)
	Lines 2 to NF+1: Kelvin Voigt damping (in seconds) for each fault.
        Line NF+2: Type of simulation (1=dynamic , 2 = kinematic)       
	Line NF+3: Number of time steps between updates of the time series outputs at selected
		fault points (see DATA/FAULT/FAULT_STATIONS), usually a large number (100s or 1000s). 
		Note that the sampling rate of the time series is usually much higher.
	Line NF+4: Number of time steps between fault snapshot outputs (quantities at every fault 
		point exported at regular times), usually a large number (100s or 1000s).
	Line NF+5: Slip velocity threshold below which frictional healing is set (friction coefficient
               is reset to its static value). If this value is negative healing is disabled.
	Line NF+6: Slip velocity threshold to define the rupture front. Only used for outputs.

        The rest of this file is made of namelist input blocks (see "namelist" in a Fortran 9x manual).
        The input for each fault has the following sequence (arguments in [brackets] are optional):

	  &BEGIN_FAULT /
          &INIT_STRESS S1, S2, S3 [,n1, n2, n3] / 
          followed by (n1+n2+n3) &DIST2D blocks
	  &SWF mus, mud, dc [, nmus, nmud, ndc] /
          followed by (nmus+nmud+ndc) &DIST2D blocks

 	We adopt the usual coordinate system in seismology: (strike,dip,normal) where
	the dip direction points downwards. This implies that the normal direction points out of 
	the footwall. See the figure below:

	             ^(normal)
	           . 
		 .
	       ___________ . . > (strike)
	       |         |
	       |  Fault  |
	       |_________|
	       . 
	       . 
	       v (dip)

        The &INIT_STRESS input block sets the initial fault stresses relative to the foot-wall side of 
	the fault. Initial stresses are composed of a constant background value possibly overwritten 
	in prescribed regions by heterogeneous distributions (see &DIST2D blocks below):
		S1 = constant background value of along-strike shear stress 
		     (positive in the usual strike direction)
		S2 = constant background value of along-dip shear
		     (positive is down-dip, normal faulting)
		S3 = constant background value of normal stress (negative in compresion)
		n1 = number of heterogeneous items for along-strike shear stress [default is 0]
		n2 = number of heterogeneous items for along-dip shear stress [default is 0]
		n3 = number of heterogeneous items for normal stress [default is 0]

        The &SWF input block sets the slip-weakening friction parameters of the fault:
		mus = constant background value of static friction coefficient 
		mud = constant background value of dynamic friction coefficient 
		dc  = constant background value of critical slip-weakening distance
		nmus = number of heterogeneous items for static friction coefficient [default is 0]
		nmud = number of heterogeneous items for dynamic friction coefficient [default is 0]
		ndc = number of heterogeneous items for critical slip-weakening distance [default is 0]

        The &DIST2D input blocks modify (overwrite) the value of a fault parameter by a heterogeneous 
	spatial distribution:

		&DIST2D	shape='square', val, xc, yc, zc, l /
                sets a constant value (val) within a cube with center (xc,yc,zc) and edge size l. 

		&DIST2D	shape='rectangle', val, xc, yc, zc, lx, ly, lz /
                sets a constant value (val) within a rectangular prism with center (xc,yc,zc)
                and edge sizes (lx,ly,lz). 

		&DIST2D	shape='rectangle-taper', val, valh, xc, yc, zc, lx, ly, lz /
                sets a vertical linear gradient 
		within a rectangular prism with center (xc,yc,zc) and edge sizes (lx,ly,lz). 
		Values vary linearly as a function of vertical position z
		between value val at z = zc-lz/2 and value valh at z = zc+lz/2 .

		&DIST2D	shape='circular', val, xc, yc, zc, r /
                sets a constant value (val) within a sphere with center (xc,yc,zc) and radius r. 



DATA/FAULT/FAULT_STATIONS	Stations in the fault plane.
	Line 1: number of stations.
	Line 2 to end: 5 columns: X, Y, Z (-depth), station name, fault-id
       		The fault-id identifies the fault that contains the station.
		It is the index of appearance in the faults list after line 2 of Par_file_faults

Several files are generated automatically by xgenerate_databases in directory DATABASES_MPI
and do not need to be modified by the user.



IV. OUTPUT FILES
-----------------

Several output files are saved in ~/SPECFEM3D/OUTPUT_FILES:

1. Seismograms for each station on the fault plane given in DATA/FAULT/FAULT_STATIONS. 
   One output file is generated for each station, named after the station. The files
   are ascii and start with a header (22 lines long) followed by a data block with the
   following format, one line per time sample:

   # Column #1 = Time (s)
   # Column #2 = horizontal right-lateral slip (m)
   # Column #3 = horizontal right-lateral slip rate (m/s)
   # Column #4 = horizontal right-lateral shear stress (MPa)
   # Column #5 = vertical up-dip slip (m)
   # Column #6 = vertical up-dip slip rate (m/s)
   # Column #7 = vertical up-dip shear stress (MPa)
   # Column #8 = normal stress (MPa)

   The stresses are relative to the footwall side of the fault (this convention controls
   their sign, but not their amplitude). Slip is defined as displacement of the hanging 
   wall relative to the footwall.

2. Seismograms at stations in the bulk (out of the fault plane) given in DATA/STATIONS.  
   The name and format of these output files is described in page 51 of the manual.

3. Rupture time files are named Rupture_time_FAULT-id. One file is generated for each fault.
   The files are ascii and start with a header (12 lines long) followed by a data block 
   with the following format, one line per fault node:
   # Column #1 = X position (m)
   # Column #2 = Y position (m)
   # Column #3 = Z position (m)
   # Column #3 = rupture time (s)




V. POST-PROCESSING AND VISUALIZATION
-------------------------------------

Some Matlab functions for post-processing and visualization are included in directory
Post-processing. The functions are internally documented (see their matlab help).

  FSEM3D_snapshot	reads a fault data snapshot

The directories EXAMPLES/*/post contain additional Matlab scripts to generate figures
specific to each example.

